{"version":3,"file":"aptos-keyring.cjs.production.min.js","sources":["../src/DefaultInteractionProvider.ts","../src/BaseKeyring.ts","../src/DefaultKeyring.ts"],"sourcesContent":["import {\n  AptosSignature,\n  AptosSignRequest\n} from \"@keystonehq/bc-ur-registry-aptos\";\nimport { InteractionProvider } from \"./InteractionProvider\";\nimport sdk, { PlayStatus, ReadStatus, SupportedResult } from \"@keystonehq/sdk\";\nimport { CryptoMultiAccounts } from \"@keystonehq/bc-ur-registry\";\n\nexport class DefaultInteractionProvider implements InteractionProvider {\n  private static instance;\n  private keystoneSDK = undefined;\n\n  constructor() {\n    if (DefaultInteractionProvider.instance) {\n      return DefaultInteractionProvider.instance;\n    }\n    sdk.bootstrap();\n    this.keystoneSDK = sdk.getSdk();\n    DefaultInteractionProvider.instance = this;\n  }\n\n  public readCryptoMultiAccounts = async () => {\n    const decodedResult = await this.keystoneSDK.read(\n      [SupportedResult.UR_CRYPTO_MULTI_ACCOUNTS],\n      {\n        title: \"Sync Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\",\n        renderInitial: {\n          walletMode: \"Aptos\",\n          link: \"https://keyst.one/defi\"\n        },\n        URTypeErrorMessage:\n          \"The scanned QR code is not the sync code from the Keystone hardware wallet. Please verify the code and try again\"\n      }\n    );\n    if (decodedResult.status === ReadStatus.success) {\n      const { result } = decodedResult;\n      return CryptoMultiAccounts.fromCBOR(result.cbor);\n    } else {\n      throw new Error(\"Reading canceled\");\n    }\n  };\n\n  public requestSignature = async (\n    aptosSignRequest: AptosSignRequest,\n    requestTitle?: string,\n    requestDescription?: string\n  ) => {\n    const status = await this.keystoneSDK.play(aptosSignRequest.toUR(), {\n      hasNext: true,\n      title: requestTitle,\n      description: requestDescription,\n      maxFragmentLength: 400\n    });\n    if (status === PlayStatus.canceled)\n      throw new Error(\"#ktek_error[play-cancel]: play canceled\");\n    const result = await this.keystoneSDK.read(\n      [SupportedResult.UR_APTOS_SIGN_REQUEST],\n      {\n        title: \"Scan Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\",\n      }\n    );\n    if (result.status === ReadStatus.canceled) {\n      throw new Error(\"#ktek_error[read-cancel]: read signature canceled\");\n    } else {\n      return AptosSignature.fromCBOR(result.result.cbor);\n    }\n  };\n}\n","import * as uuid from \"uuid\";\nimport { InteractionProvider } from \"./InteractionProvider\";\nimport { CryptoMultiAccounts } from \"@keystonehq/bc-ur-registry\";\nimport { AptosSignRequest, SignType } from \"@keystonehq/bc-ur-registry-aptos\";\nimport { Buffer } from \"buffer\";\n\nconst keyringType = \"QR Hardware Wallet Device\";\n\nexport interface HDKey {\n  hdPath: string;\n  pubKey: string;\n  index: number;\n}\n\ninterface KeyringInitData {\n  xfp: string;\n  keys: HDKey[];\n  name?: string;\n  device?: string;\n}\n\nexport class BaseKeyring {\n  getInteraction = (): InteractionProvider => {\n    throw new Error(\n      \"KeystoneError#invalid_extends: method getInteraction not implemented, please extend BaseKeyring by overwriting this method.\"\n    );\n  };\n  static type = keyringType;\n  protected xfp: string;\n  protected type = keyringType;\n  protected initialized: boolean;\n  protected keys: HDKey[];\n  protected name: string;\n  protected device: string;\n  constructor() {\n    //common props\n    this.keys = [];\n    this.name = \"QR Hardware\";\n    this.initialized = false;\n    this.device = \"\";\n    this.xfp = \"\";\n  }\n\n  protected requestSignature = async (\n    _requestId: string,\n    signRequest: AptosSignRequest,\n    requestTitle?: string,\n    requestDescription?: string\n  ) => {\n    const aptosSignature = await this.getInteraction().requestSignature(\n      signRequest,\n      requestTitle,\n      requestDescription\n    );\n    const requestIdBuffer = aptosSignature.getRequestId();\n    const signature = aptosSignature.getSignature();\n    const authPubKey = aptosSignature.getAuthenticationPublicKey();\n    if (requestIdBuffer) {\n      const requestId = uuid.stringify(requestIdBuffer);\n      if (requestId !== _requestId) {\n        throw new Error(\n          \"KeystoneError#invalid_data: read signature error: mismatched requestId\"\n        );\n      }\n    }\n    return { signature, authPubKey };\n  };\n\n  //initial read\n  async readKeyring(): Promise<void> {\n    const result = await this.getInteraction().readCryptoMultiAccounts();\n    this.syncKeyring(result);\n  }\n\n  public syncKeyring(data: CryptoMultiAccounts): void {\n    const keys = data.getKeys();\n    this.device = data.getDevice();\n    this.xfp = data.getMasterFingerprint().toString(\"hex\");\n    this.name = data.getKeys()[0].getName();\n    this.keys = keys.map((each, index) => ({\n      hdPath: each.getOrigin().getPath(),\n      pubKey: each.getKey().toString(\"hex\"),\n      index\n    }));\n    this.initialized = true;\n  }\n\n  public syncKeyringData({\n    xfp,\n    keys,\n    name = \"QR Hardware\",\n    device\n  }: KeyringInitData): void {\n    this.xfp = xfp;\n    this.name = name;\n    this.keys = keys;\n    this.device = device;\n    this.initialized = true;\n  }\n\n  public getName = (): string => {\n    return this.name;\n  };\n\n  getPubKeys() {\n    if (!this.initialized) {\n      return [];\n    }\n    return this.keys;\n  }\n\n  _ensureHex(hexStr) {\n    if (hexStr.startsWith(\"0x\")) {\n      return hexStr;\n    } else {\n      return `0x${hexStr}`;\n    }\n  }\n  async _getSignature(\n    authPubKey: string,\n    msg: Uint8Array,\n    signType: SignType,\n    senderAddress?: string,\n    origin?: string\n  ) {\n    const requestId = uuid.v4();\n    const key = this.getPubKeys().find(\n      key => this._ensureHex(key.pubKey) === this._ensureHex(authPubKey)\n    );\n    const accounts = senderAddress\n      ? [Buffer.from(this._ensureHex(senderAddress).slice(2))]\n      : [];\n    const atosSignRequest = AptosSignRequest.constructAptosRequest(\n      Buffer.from(msg),\n      [key.hdPath],\n      [this.xfp],\n      signType,\n      requestId,\n      accounts,\n      origin\n    );\n    return this.requestSignature(\n      requestId,\n      atosSignRequest,\n      \"Scan with your Keystone\",\n      'After your Keystone has signed this message, click on \"Scan Keystone\" to receive the signature'\n    );\n  }\n  async signMessage(\n    authPubKey: string,\n    msg: Uint8Array,\n    senderAddress?: string,\n    origin?: string\n  ) {\n    return this._getSignature(\n      authPubKey,\n      msg,\n      SignType.SignMessage,\n      senderAddress,\n      origin\n    );\n  }\n\n  async signTransaction(\n    authPubKey: string,\n    msg: Uint8Array,\n    senderAddress?: string,\n    origin?: string\n  ) {\n    return this._getSignature(\n      authPubKey,\n      msg,\n      SignType.SingleSign,\n      senderAddress,\n      origin\n    );\n  }\n}\n","import { DefaultInteractionProvider } from \"./DefaultInteractionProvider\";\nimport { BaseKeyring } from \"./BaseKeyring\";\n\nexport class DefaultKeyring extends BaseKeyring {\n  static type = BaseKeyring.type;\n\n  static getEmptyKeyring(): DefaultKeyring {\n    return new DefaultKeyring();\n  }\n\n  constructor() {\n    super();\n  }\n\n  getInteraction = () => {\n    return new DefaultInteractionProvider();\n  };\n}\n"],"names":["DefaultInteractionProvider","constructor","undefined","async","decodedResult","this","keystoneSDK","read","SupportedResult","UR_CRYPTO_MULTI_ACCOUNTS","title","description","renderInitial","walletMode","link","URTypeErrorMessage","status","ReadStatus","success","result","CryptoMultiAccounts","fromCBOR","cbor","Error","aptosSignRequest","requestTitle","requestDescription","play","toUR","hasNext","maxFragmentLength","PlayStatus","canceled","UR_APTOS_SIGN_REQUEST","AptosSignature","instance","sdk","bootstrap","getSdk","BaseKeyring","_requestId","signRequest","aptosSignature","getInteraction","requestSignature","requestIdBuffer","getRequestId","signature","getSignature","authPubKey","getAuthenticationPublicKey","uuid","name","keys","initialized","device","xfp","readCryptoMultiAccounts","syncKeyring","data","getKeys","getDevice","getMasterFingerprint","toString","getName","map","each","index","hdPath","getOrigin","getPath","pubKey","getKey","syncKeyringData","getPubKeys","_ensureHex","hexStr","startsWith","msg","signType","senderAddress","origin","requestId","key","find","accounts","Buffer","from","slice","atosSignRequest","AptosSignRequest","constructAptosRequest","_getSignature","SignType","SignMessage","SingleSign","DefaultKeyring","type"],"mappings":"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"}