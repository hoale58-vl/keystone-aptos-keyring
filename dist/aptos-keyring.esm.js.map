{"version":3,"file":"aptos-keyring.esm.js","sources":["../src/DefaultInteractionProvider.ts","../src/BaseKeyring.ts","../src/DefaultKeyring.ts"],"sourcesContent":["import {\n  AptosSignature,\n  AptosSignRequest\n} from \"@keystonehq/bc-ur-registry-aptos\";\nimport { InteractionProvider } from \"./InteractionProvider\";\nimport sdk, { PlayStatus, ReadStatus, SupportedResult } from \"@keystonehq/sdk\";\nimport { CryptoMultiAccounts } from \"@keystonehq/bc-ur-registry\";\n\nexport class DefaultInteractionProvider implements InteractionProvider {\n  private static instance;\n  private keystoneSDK = undefined;\n\n  constructor() {\n    if (DefaultInteractionProvider.instance) {\n      return DefaultInteractionProvider.instance;\n    }\n    sdk.bootstrap();\n    this.keystoneSDK = sdk.getSdk();\n    DefaultInteractionProvider.instance = this;\n  }\n\n  public readCryptoMultiAccounts = async () => {\n    const decodedResult = await this.keystoneSDK.read(\n      [SupportedResult.UR_CRYPTO_MULTI_ACCOUNTS],\n      {\n        title: \"Sync Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\",\n        renderInitial: {\n          walletMode: \"Aptos\",\n          link: \"https://keyst.one/defi\"\n        },\n        URTypeErrorMessage:\n          \"The scanned QR code is not the sync code from the Keystone hardware wallet. Please verify the code and try again\"\n      }\n    );\n    if (decodedResult.status === ReadStatus.success) {\n      const { result } = decodedResult;\n      return CryptoMultiAccounts.fromCBOR(result.cbor);\n    } else {\n      throw new Error(\"Reading canceled\");\n    }\n  };\n\n  public requestSignature = async (\n    aptosSignRequest: AptosSignRequest,\n    requestTitle?: string,\n    requestDescription?: string\n  ) => {\n    const status = await this.keystoneSDK.play(aptosSignRequest.toUR(), {\n      hasNext: true,\n      title: requestTitle,\n      description: requestDescription,\n      maxFragmentLength: 400\n    });\n    if (status === PlayStatus.canceled)\n      throw new Error(\"#ktek_error[play-cancel]: play canceled\");\n    const result = await this.keystoneSDK.read(\n      [SupportedResult.UR_APTOS_SIGN_REQUEST],\n      {\n        title: \"Scan Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\",\n      }\n    );\n    if (result.status === ReadStatus.canceled) {\n      throw new Error(\"#ktek_error[read-cancel]: read signature canceled\");\n    } else {\n      return AptosSignature.fromCBOR(result.result.cbor);\n    }\n  };\n}\n","import * as uuid from \"uuid\";\nimport { InteractionProvider } from \"./InteractionProvider\";\nimport { CryptoMultiAccounts } from \"@keystonehq/bc-ur-registry\";\nimport { AptosSignRequest, SignType } from \"@keystonehq/bc-ur-registry-aptos\";\nimport { Buffer } from \"buffer\";\n\nconst keyringType = \"QR Hardware Wallet Device\";\n\nexport interface HDKey {\n  hdPath: string;\n  pubKey: string;\n  index: number;\n}\n\ninterface KeyringInitData {\n  xfp: string;\n  keys: HDKey[];\n  name?: string;\n  device?: string;\n}\n\nexport class BaseKeyring {\n  getInteraction = (): InteractionProvider => {\n    throw new Error(\n      \"KeystoneError#invalid_extends: method getInteraction not implemented, please extend BaseKeyring by overwriting this method.\"\n    );\n  };\n  static type = keyringType;\n  protected xfp: string;\n  protected type = keyringType;\n  protected initialized: boolean;\n  protected keys: HDKey[];\n  protected name: string;\n  protected device: string;\n  constructor() {\n    //common props\n    this.keys = [];\n    this.name = \"QR Hardware\";\n    this.initialized = false;\n    this.device = \"\";\n    this.xfp = \"\";\n  }\n\n  protected requestSignature = async (\n    _requestId: string,\n    signRequest: AptosSignRequest,\n    requestTitle?: string,\n    requestDescription?: string\n  ) => {\n    const aptosSignature = await this.getInteraction().requestSignature(\n      signRequest,\n      requestTitle,\n      requestDescription\n    );\n    const requestIdBuffer = aptosSignature.getRequestId();\n    const signature = aptosSignature.getSignature();\n    const authPubKey = aptosSignature.getAuthenticationPublicKey();\n    if (requestIdBuffer) {\n      const requestId = uuid.stringify(requestIdBuffer);\n      if (requestId !== _requestId) {\n        throw new Error(\n          \"KeystoneError#invalid_data: read signature error: mismatched requestId\"\n        );\n      }\n    }\n    return { signature, authPubKey };\n  };\n\n  //initial read\n  async readKeyring(): Promise<void> {\n    const result = await this.getInteraction().readCryptoMultiAccounts();\n    this.syncKeyring(result);\n  }\n\n  public syncKeyring(data: CryptoMultiAccounts): void {\n    const keys = data.getKeys();\n    this.device = data.getDevice();\n    this.xfp = data.getMasterFingerprint().toString(\"hex\");\n    this.name = data.getKeys()[0].getName();\n    this.keys = keys.map((each, index) => ({\n      hdPath: each.getOrigin().getPath(),\n      pubKey: each.getKey().toString(\"hex\"),\n      index\n    }));\n    this.initialized = true;\n  }\n\n  public syncKeyringData({\n    xfp,\n    keys,\n    name = \"QR Hardware\",\n    device\n  }: KeyringInitData): void {\n    this.xfp = xfp;\n    this.name = name;\n    this.keys = keys;\n    this.device = device;\n    this.initialized = true;\n  }\n\n  public getName = (): string => {\n    return this.name;\n  };\n\n  getPubKeys() {\n    if (!this.initialized) {\n      return [];\n    }\n    return this.keys;\n  }\n\n  _ensureHex(hexStr) {\n    if (hexStr.startsWith(\"0x\")) {\n      return hexStr;\n    } else {\n      return `0x${hexStr}`;\n    }\n  }\n  async _getSignature(\n    authPubKey: string,\n    msg: Uint8Array,\n    signType: SignType,\n    senderAddress?: string,\n    origin?: string\n  ) {\n    const requestId = uuid.v4();\n    const key = this.getPubKeys().find(\n      key => this._ensureHex(key.pubKey) === this._ensureHex(authPubKey)\n    );\n    const accounts = senderAddress\n      ? [Buffer.from(this._ensureHex(senderAddress).slice(2))]\n      : [];\n    const atosSignRequest = AptosSignRequest.constructAptosRequest(\n      Buffer.from(msg),\n      [key.hdPath],\n      [this.xfp],\n      signType,\n      requestId,\n      accounts,\n      origin\n    );\n    return this.requestSignature(\n      requestId,\n      atosSignRequest,\n      \"Scan with your Keystone\",\n      'After your Keystone has signed this message, click on \"Scan Keystone\" to receive the signature'\n    );\n  }\n  async signMessage(\n    authPubKey: string,\n    msg: Uint8Array,\n    senderAddress?: string,\n    origin?: string\n  ) {\n    return this._getSignature(\n      authPubKey,\n      msg,\n      SignType.SignMessage,\n      senderAddress,\n      origin\n    );\n  }\n\n  async signTransaction(\n    authPubKey: string,\n    msg: Uint8Array,\n    senderAddress?: string,\n    origin?: string\n  ) {\n    return this._getSignature(\n      authPubKey,\n      msg,\n      SignType.SingleSign,\n      senderAddress,\n      origin\n    );\n  }\n}\n","import { DefaultInteractionProvider } from \"./DefaultInteractionProvider\";\nimport { BaseKeyring } from \"./BaseKeyring\";\n\nexport class DefaultKeyring extends BaseKeyring {\n  static type = BaseKeyring.type;\n\n  static getEmptyKeyring(): DefaultKeyring {\n    return new DefaultKeyring();\n  }\n\n  constructor() {\n    super();\n  }\n\n  getInteraction = () => {\n    return new DefaultInteractionProvider();\n  };\n}\n"],"names":["DefaultInteractionProvider","constructor","undefined","decodedResult","keystoneSDK","read","SupportedResult","UR_CRYPTO_MULTI_ACCOUNTS","title","description","renderInitial","walletMode","link","URTypeErrorMessage","status","ReadStatus","success","result","CryptoMultiAccounts","fromCBOR","cbor","Error","aptosSignRequest","requestTitle","requestDescription","play","toUR","hasNext","maxFragmentLength","PlayStatus","canceled","UR_APTOS_SIGN_REQUEST","AptosSignature","instance","sdk","bootstrap","getSdk","keyringType","BaseKeyring","_requestId","signRequest","aptosSignature","getInteraction","requestSignature","requestIdBuffer","getRequestId","signature","getSignature","authPubKey","getAuthenticationPublicKey","requestId","uuid","name","keys","initialized","device","xfp","readKeyring","readCryptoMultiAccounts","syncKeyring","data","getKeys","getDevice","getMasterFingerprint","toString","getName","map","each","index","hdPath","getOrigin","getPath","pubKey","getKey","syncKeyringData","getPubKeys","_ensureHex","hexStr","startsWith","_getSignature","msg","signType","senderAddress","origin","key","find","accounts","Buffer","from","slice","atosSignRequest","AptosSignRequest","constructAptosRequest","signMessage","SignType","SignMessage","signTransaction","SingleSign","DefaultKeyring","getEmptyKeyring","type"],"mappings":"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"}