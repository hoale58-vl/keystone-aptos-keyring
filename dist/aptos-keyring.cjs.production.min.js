"use strict";var e,t=require("@keystonehq/bc-ur-registry-aptos"),s=require("@keystonehq/sdk"),r=(e=s)&&"object"==typeof e&&"default"in e?e.default:e,i=require("@keystonehq/bc-ur-registry"),n=require("uuid"),a=require("buffer");class o{constructor(){if(this.keystoneSDK=void 0,this.readCryptoMultiAccounts=async()=>{const e=await this.keystoneSDK.read([s.SupportedResult.UR_CRYPTO_MULTI_ACCOUNTS],{title:"Sync Keystone",description:"Please scan the QR code displayed on your Keystone",renderInitial:{walletMode:"Aptos",link:"https://keyst.one/defi"},URTypeErrorMessage:"The scanned QR code is not the sync code from the Keystone hardware wallet. Please verify the code and try again"});if(e.status===s.ReadStatus.success){const{result:t}=e;return i.CryptoMultiAccounts.fromCBOR(t.cbor)}throw new Error("Reading canceled")},this.requestSignature=async(e,r,i)=>{if(await this.keystoneSDK.play(e.toUR(),{hasNext:!0,title:r,description:i,maxFragmentLength:400})===s.PlayStatus.canceled)throw new Error("#ktek_error[play-cancel]: play canceled");const n=await this.keystoneSDK.read([s.SupportedResult.UR_APTOS_SIGN_REQUEST],{title:"Scan Keystone",description:"Please scan the QR code displayed on your Keystone"});if(n.status===s.ReadStatus.canceled)throw new Error("#ktek_error[read-cancel]: read signature canceled");return t.AptosSignature.fromCBOR(n.result.cbor)},o.instance)return o.instance;r.bootstrap(),this.keystoneSDK=r.getSdk(),o.instance=this}}class c{constructor(){this.getInteraction=()=>{throw new Error("KeystoneError#invalid_extends: method getInteraction not implemented, please extend BaseKeyring by overwriting this method.")},this.type="QR Hardware Wallet Device",this.requestSignature=async(e,t,s,r)=>{const i=await this.getInteraction().requestSignature(t,s,r),a=i.getRequestId(),o=i.getSignature(),c=i.getAuthenticationPublicKey();if(a&&n.stringify(a)!==e)throw new Error("KeystoneError#invalid_data: read signature error: mismatched requestId");return{signature:o,authPubKey:c}},this.getName=()=>this.name,this.keys=[],this.name="QR Hardware",this.initialized=!1,this.device="",this.xfp=""}async readKeyring(){const e=await this.getInteraction().readCryptoMultiAccounts();this.syncKeyring(e)}syncKeyring(e){const t=e.getKeys();this.device=e.getDevice(),this.xfp=e.getMasterFingerprint().toString("hex"),this.name=e.getKeys()[0].getName(),this.keys=t.map((e,t)=>({hdPath:e.getOrigin().getPath(),pubKey:e.getKey().toString("hex"),index:t})),this.initialized=!0}syncKeyringData({xfp:e,keys:t,name:s="QR Hardware",device:r}){this.xfp=e,this.name=s,this.keys=t,this.device=r,this.initialized=!0}getPubKeys(){return this.initialized?this.keys:[]}_ensureHex(e){return e.startsWith("0x")?e:"0x"+e}async _getSignature(e,s,r,i,o){const c=n.v4(),u=this.getPubKeys().find(t=>this._ensureHex(t.pubKey)===this._ensureHex(e)),y=i?[a.Buffer.from(this._ensureHex(i).slice(2))]:[],h=t.AptosSignRequest.constructAptosRequest(a.Buffer.from(s),[u.hdPath],[this.xfp],r,c,y,o);return this.requestSignature(c,h,"Scan with your Keystone",'After your Keystone has signed this message, click on "Scan Keystone" to receive the signature')}async signMessage(e,s,r,i){return this._getSignature(e,s,t.SignType.SignMessage,r,i)}async signTransaction(e,s,r,i){return this._getSignature(e,s,t.SignType.SingleSign,r,i)}}c.type="QR Hardware Wallet Device";class u extends c{constructor(){super(),this.getInteraction=()=>new o}static getEmptyKeyring(){return new u}}u.type=c.type,exports.BaseKeyring=c,exports.DefaultKeyring=u;
//# sourceMappingURL=aptos-keyring.cjs.production.min.js.map
